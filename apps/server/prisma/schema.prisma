// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String
  password      String
  email         String      @unique
  isAdmin       Boolean
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  favouriteList Product[]
  favourite     Favourite[]
  cart          Cart[]
  payment       Payment[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  price         Float
  size          String
  images        String[]
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User?         @relation(fields: [userId], references: [id])
  userId        Int?
  favourite     Favourite?    @relation(fields: [favouriteId], references: [id])
  favouriteId   Int?
  cart          Cart?         @relation(fields: [cartId], references: [id])
  cartId        Int?
  stockQuantity Int
  featured      Boolean
  newArrivals   Boolean
  cartProduct   CartProduct[]
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    Int
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Favourite {
  id       Int       @id @default(autoincrement())
  name     String
  user     User?     @relation(fields: [userId], references: [id])
  userId   Int
  products Product[]
}

model Cart {
  id          Int           @id @default(autoincrement())
  product     Product[]
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ammount     Float
  payment     Payment       @relation(fields: [paymentId], references: [id])
  paymentId   Int
  cartProduct CartProduct[]
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Payment {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  amount      Float
  credentials Json
  paymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart[]
}
